package com.java6.asm.clothing_store.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebSecurity
@Order(2) // üöÄ X·ª≠ l√Ω sau c·∫•u h√¨nh d√†nh cho refresh token
public class SecurityConfig {

    private final String[] PUBLIC_URLS = {
            "/auth/system/*",
            "/auth/google/*",
            "/auth/zalo/*",
    };
    /**
     * ‚úÖ C·∫•u h√¨nh b·∫£o m·∫≠t cho ·ª©ng d·ª•ng Spring Security
     * - NgƒÉn ch·∫∑n truy c·∫≠p tr√°i ph√©p v√†o c√°c API
     * - B·∫≠t x√°c th·ª±c b·∫±ng JWT cho c√°c request
     * üîπ C·∫•u h√¨nh c·ª• th·ªÉ:
     * - Cho ph√©p truy c·∫≠p c√¥ng khai v√†o c√°c endpoint `/auth/login`, `/auth/refresh`, `/auth/logout`
     * - M·ªçi request kh√°c ƒë·ªÅu y√™u c·∫ßu x√°c th·ª±c
     * - S·ª≠ d·ª•ng OAuth2 Resource Server v·ªõi JWT ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng
     * @param http ƒê·ªëi t∆∞·ª£ng c·∫•u h√¨nh b·∫£o m·∫≠t c·ªßa Spring Security
     * @return SecurityFilterChain - Chu·ªói b·ªô l·ªçc b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
     * @throws Exception N·∫øu c√≥ l·ªói trong qu√° tr√¨nh c·∫•u h√¨nh b·∫£o m·∫≠t
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http, JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable) // ‚ùå T·∫Øt CSRF (v√¨ API kh√¥ng d√πng session)
                .cors(Customizer.withDefaults())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/auth/system/login",
//                                "/auth/system/refresh",  // ‚úÖ Cho ph√©p truy c·∫≠p refresh token
                                "/auth/system/logout"
                        ).permitAll()
                        .anyRequest().authenticated()
                )
                .exceptionHandling(exception -> exception
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint) // üî• G·∫Øn EntryPoint x·ª≠ l√Ω l·ªói 401
                )
                .oauth2Login(oauth2 -> oauth2
                        .defaultSuccessUrl("/auth/google/success", true) // ‚úÖ X·ª≠ l√Ω khi ƒëƒÉng nh·∫≠p Google th√†nh c√¥ng
                )
                .oauth2ResourceServer(oauth2 -> oauth2
                        .jwt(Customizer.withDefaults()) // üõ°Ô∏è X√°c th·ª±c JWT cho t√†i kho·∫£n System
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)
                )
//                .addFilterBefore(jwtRequestFilter, AbstractPreAuthenticatedProcessingFilter.class); // üöÄ Th√™m filter tr∆∞·ªõc JWT

        ;

        return http.build();
    }




    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(10);
    }

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**") // √Åp d·ª•ng cho t·∫•t c·∫£ API
                        .allowedOrigins("http://localhost:5173") // Cho ph√©p frontend truy c·∫≠p
                        .allowedMethods("GET", "POST", "PUT", "DELETE") // C√°c ph∆∞∆°ng th·ª©c HTTP ƒë∆∞·ª£c ph√©p
                        .allowedHeaders("*") // Ch·∫•p nh·∫≠n t·∫•t c·∫£ headers
                        .allowCredentials(true); // Cho ph√©p g·ª≠i cookie (n·∫øu c·∫ßn)
            }
        };
    }


}